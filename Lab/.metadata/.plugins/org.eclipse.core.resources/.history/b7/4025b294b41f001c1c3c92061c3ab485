package com.matheusgr.lunr.documento;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import biblitex.TransformaTexto;

public class DocumentoSuper implements Documento{
	
	private String id;
	private String original;
	private String limpo;
	private Map<String, String> metadados;
	private String[] split;
	
	public DocumentoSuper(String id, String original) {
		this.id = id;
		this.original = original;
		var transformaTexto = new TransformaTexto();
		var txt = transformaTexto.transforma(TransformaTexto.Algoritmos.java, original);
		this.limpo = transformaTexto.transforma(TransformaTexto.Algoritmos.clean, txt).strip();
	}

	@Override
	public double metricaTextoUtil() {
		long extractedSize = (new TransformaTexto()).transforma(TransformaTexto.Algoritmos.cleanSpaces, this.limpo)
				.length();
		return (1.0 * extractedSize) / this.original.length();
	}

	@Override
	public String getId() {
		return this.id;
	}

	@Override
	public String[] getTexto() {
		if (this.split == null) {
			this.split = (new TransformaTexto()).transforma(TransformaTexto.Algoritmos.cleanLines, this.limpo).split(" ");
			Arrays.sort(this.split);
		}
		return this.split;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + Arrays.hashCode(split);
		result = prime * result + Objects.hash(id, limpo, metadados, original);
		return result;
	}

	@Override
	public Map<String, String> getMetadados() {
		if (this.metadados != null) {
			return this.metadados;
		}
		this.metadados = new HashMap<String, String>();
		this.metadados.put("LINHAS", "" + this.original.chars().filter((value) -> '\n' == value).count());
		this.metadados.put("TAMANHO", "" + this.limpo.length());
		this.metadados.put("METADATADATE", "" + System.currentTimeMillis());
		this.metadados.put("TIPO", "" + "txt");
		return this.metadados;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		DocumentoSuper other = (DocumentoSuper) obj;
		return Objects.equals(id, other.id) && Objects.equals(limpo, other.limpo)
				&& Objects.equals(metadados, other.metadados) && Objects.equals(original, other.original)
				&& Arrays.equals(split, other.split);
	}
	
	@Override
	public String toString() {
		return "===" + this.id + System.lineSeparator() + this.limpo;
	}
	
	public String getOriginal() {
		return this.original;
	}

	public String getLimpo() {
		return this.limpo;
	}
}
